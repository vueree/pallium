import { defineStore } from "pinia";
import { useRouter } from "vue-router";
import { ref, watch, nextTick } from "vue";
import type { IMessage } from "../types";

export const useWebSocketStore = defineStore("webSocketStore", () => {
  const token = ref<string | null>(null); // –¢–æ–∫–µ–Ω WebSocket
  const messages = ref<IMessage[]>([]); // –°–æ–æ–±—â–µ–Ω–∏—è
  const isConnected = ref(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket
  const username = ref<string>(""); // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ username
  const socket = ref<WebSocket | null>(null);
  const router = useRouter();

  let reconnectTimeout: NodeJS.Timeout | null = null; // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ token
  const setToken = (newToken: string) => {
    const maskedToken = newToken.slice(0, 10) + "..." + newToken.slice(-4); // –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
    console.log("üöÄ ~ setToken ~ newToken:", maskedToken);
    token.value = newToken;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º nextTick, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    nextTick(() => {
      console.log("Token after nextTick:", token.value);
      if (!token.value) {
        router.push({ name: "Login" }); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π
      }
    });
  };

  const addMessages = (newMessages: IMessage[]) => {
    const uniqueMessages = newMessages.filter(
      (msg) => !messages.value.find((m) => m.id === msg.id)
    );
    messages.value = [...uniqueMessages, ...messages.value];
  };

  const addMessage = (newMessage: IMessage) => {
    console.log("üöÄ ~ addMessage ~ newMessage:", newMessage);
    if (!messages.value.find((msg) => msg.id === newMessage.id)) {
      messages.value.push(newMessage);
    }
  };

  const clearMessages = () => {
    console.log("üöÄ ~ clearMessages ~ clearing all messages");
    messages.value = [];
  };

  const connect = (token: string) => {
    if (!token) {
      console.error("Token is required for WebSocket connection");
      return;
    }

    const url = "ws://localhost:3000/chat"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –≤ URL

    socket.value = new WebSocket(url);

    socket.value.onopen = () => {
      isConnected.value = true;
      console.log("üöÄ ~ WebSocket connected");
      if (reconnectTimeout) {
        clearTimeout(reconnectTimeout); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        reconnectTimeout = null;
      }
    };

    socket.value.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log("üöÄ ~ WebSocket onmessage ~ data:", data);
        if (Array.isArray(data)) {
          addMessages(data); // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        } else {
          addMessage(data); // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
      } catch (error) {
        console.error("üöÄ ~ WebSocket onmessage error:", error);
      }
    };

    socket.value.onerror = (error) => {
      console.error("üöÄ ~ WebSocket error:", error);
    };

    socket.value.onclose = () => {
      isConnected.value = false;
      socket.value = null;
      console.log("üöÄ ~ WebSocket disconnected");

      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      if (!reconnectTimeout) {
        reconnectTimeout = setTimeout(() => {
          console.log("üöÄ ~ Reconnecting WebSocket...");
          connect(token); // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        }, 5000);
      }
    };
  };

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket
  const disconnect = () => {
    console.log("üöÄ ~ disconnect ~ Disconnecting WebSocket...");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (socket.value && isConnected.value) {
      socket.value.close();
      socket.value = null;
      isConnected.value = false;
      console.log("üöÄ ~ WebSocket disconnected");
    } else {
      console.log("üöÄ ~ disconnect ~ No active WebSocket connection");
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (reconnectTimeout) {
      clearTimeout(reconnectTimeout);
      reconnectTimeout = null;
    }
  };

  watch(
    token,
    (newToken) => {
      if (!newToken) {
        console.log("üö® Token is missing, redirecting to Login...");
        router.push({ name: "Login" });
      }
    },
    { immediate: true }
  );

  return {
    token, // –¢–æ–∫–µ–Ω WebSocket
    messages,
    isConnected,
    connect,
    disconnect,
    addMessages,
    addMessage,
    clearMessages,
    username,
    setToken,
    socket
  };
});
